import React, { useState, useEffect } from 'react';
import './App.css';

const ConnectionTabs = () => {
  const [activeTab, setActiveTab] = useState('ssh');
  const [server, setServer] = useState(null); // –ù–∞—á–∏–Ω–∞–µ–º —Å null
  const [sshCommand, setSshCommand] = useState('');
  const [rdpFile, setRdpFile] = useState({
    ip: '',
    port: 3389,
    username: ''
  });
  const [error, setError] = useState(null); // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å API
  useEffect(() => {
    const fetchServerData = async () => {
      try {
        const response = await fetch('https://api.example.com/servers'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL
        if (!response.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö');
        }
        const data = await response.json();
        
        if (data && data.length > 0) {
          setServer(data[0]); // –ü—Ä–∏–º–µ—Ä, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
        } else {
          throw new Error('–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } catch (error) {
        setError(error.message); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
    };

    fetchServerData();
  }, []); // useEffect —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–µ
  if (error) {
    return <div className="error">–û—à–∏–±–∫–∞: {error}</div>;
  }

  // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
  if (!server) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è RDP —Ñ–∞–π–ª–∞
  const copyToClipboard = (text) => {
    if (navigator.clipboard) {
      navigator.clipboard.writeText(text);
      alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    } else {
      alert('–û—à–∏–±–∫–∞! –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }
  };

  const downloadRdpFile = () => {
    const content = [
      `full address:s:${rdpFile.ip}:${rdpFile.port}`,
      `username:s:${rdpFile.username}`,
      'session bpp:i:32',
      'autoreconnection enabled:i:1',
    ].join('\n');

    const blob = new Blob([content], { type: 'application/rdp' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${server.name}.rdp`;
    a.click();
  };

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSH –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–µ
  useEffect(() => {
    if (server) {
      setSshCommand(`ssh ${server.user}@${server.ip}`);
      setRdpFile({
        ip: server.ip,
        port: 3389,
        username: server.user,
      });
    }
  }, [server]);

  return (
    <main className="body">
      <div className="container">
        <div className="cub"></div>
        <h1 className="name">ServerLink</h1>
        <hr className="line" />

        <div className="connection-tabs">
          <div className="tab-header">
            <button
              className={activeTab === 'ssh' ? 'active' : ''}
              onClick={() => setActiveTab('ssh')}
            >
              SSH
            </button>
            <button
              className={activeTab === 'rdp' ? 'active' : ''}
              onClick={() => setActiveTab('rdp')}
            >
              RDP
            </button>
            <button
              className={activeTab === 'sftp' ? 'active' : ''}
              onClick={() => setActiveTab('sftp')}
            >
              SFTP
            </button>
          </div>

          <div className="tab-content">
            {activeTab === 'ssh' && (
              <div className="ssh-tab">
                <h3>SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</h3>
                <div className="connection-info">
                  <div className="input-group">
                    <label>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</label>
                    <div className="command-box">
                      <code>{sshCommand}</code>
                      <button onClick={() => copyToClipboard(sshCommand)}>
                        üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                    </div>
                  </div>
                  <button
                    className="connect-button"
                    onClick={() =>
                      window.open(`ssh://${server.user}@${server.ip}`)
                    }
                  >
                    –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                  </button>
                </div>
              </div>
            )}

            {activeTab === 'rdp' && (
              <div className="rdp-tab">
                <h3>RDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</h3>
                <div className="connection-info">
                  <div className="input-group">
                    <label>–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:</label>
                    <input type="text" value={rdpFile.ip} readOnly />
                  </div>
                  <div className="input-group">
                    <label>–ü–æ—Ä—Ç:</label>
                    <input
                      type="number"
                      value={rdpFile.port}
                      onChange={(e) =>
                        setRdpFile({ ...rdpFile, port: e.target.value })
                      }
                    />
                  </div>
                  <div className="input-group">
                    <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
                    <input
                      type="text"
                      value={rdpFile.username}
                      onChange={(e) =>
                        setRdpFile({ ...rdpFile, username: e.target.value })
                      }
                    />
                  </div>
                  <button className="connect-button" onClick={downloadRdpFile}>
                    –°–∫–∞—á–∞—Ç—å RDP —Ñ–∞–π–ª
                  </button>
                  <p className="hint">
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Remote Desktop (Windows) –∏–ª–∏ Remmina (Linux)
                  </p>
                </div>
              </div>
            )}

            {activeTab === 'sftp' && (
              <div className="sftp-tab">
                <h3>SFTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</h3>
                <div className="connection-info">
                  <div className="input-group">
                    <label>–•–æ—Å—Ç:</label>
                    <input type="text" value={server.ip} readOnly />
                  </div>
                  <div className="input-group">
                    <label>–ü–æ—Ä—Ç:</label>
                    <input type="number" value="22" readOnly />
                  </div>
                  <div className="input-group">
                    <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
                    <input type="text" value={server.user} readOnly />
                  </div>
                  <div className="input-group">
                    <label>–ü–∞—Ä–æ–ª—å:</label>
                    <input type="password" value="********" readOnly />
                  </div>
                  <button
                    className="connect-button"
                    onClick={() => window.open(`sftp://${server.user}@${server.ip}`)}
                  >
                    –û—Ç–∫—Ä—ã—Ç—å –≤ FileZilla
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </main>
  );
};

export default ConnectionTabs;
